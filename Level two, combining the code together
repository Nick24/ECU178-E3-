import tkinter
import time
import random
from Tkinter import *

def leftKey(event):
    print "Left key pressed"
    x1,y1,x2,y2=canvas.coords(id1)
    if x1<(Obx2 + 10) and x1>(Obx2 - 10) and y1< Oby1 and y2>Oby2:
        print "Object detected from the right side"   
    elif x1 > x_min+5:
        canvas.coords(id1,x1-10,y1,x2-10,y2)

def rightKey(event):
    print "Right key pressed"
    x1,y1,x2,y2=canvas.coords(id1)
    if x2>(Obx1 - 10) and x2<(Obx1+10) and y1< Oby1 and y2>Oby2:
        print "Object detected from the left side"    
    elif x2 < x_max-5:
        canvas.coords(id1,x1+10,y1,x2+10,y2)   
        
def upKey(event):
    print "Up key pressed"
    x1,y1,x2,y2=canvas.coords(id1)
    if y1>(Oby1 - 10) and y1<(Oby1+10) and x2>Obx1 and x1<Obx2:
        print "2 Object detected from the bottom"
    elif y1 > y_min+5:
        canvas.coords(id1,x1,y1-5,x2,y2-5)
       
def downKey(event):
    print "Down key pressed"
    x1,y1,x2,y2=canvas.coords(id1)
    if y2>(Oby2 - 10) and y2<(Oby2+10) and x2>Obx1 and x1<Obx2:
        print "Object detected from the top"
    elif y2 < y_max-5:
        canvas.coords(id1,x1,y1+5,x2,y2+5)

def xplus():    # movement right
    x3,y3,x4,y4=canvas.coords(id2)
    canvas.coords(id2,x3+vx,y3,x4+vx,y4)
    canvas.update()
    time.sleep(0.1)
def yplus():    # movement down
    x3,y3,x4,y4=canvas.coords(id2)
    canvas.coords(id2,x3,y3+vy,x4,y4+vy)
    canvas.update()
    time.sleep(0.1)
def xminus():   # movement left
    x3,y3,x4,y4=canvas.coords(id2)
    canvas.coords(id2,x3-vx,y3,x4-vx,y4)
    canvas.update()
    time.sleep(0.1)
def yminus():   # movement up
    x3,y3,x4,y4=canvas.coords(id2)
    canvas.coords(id2,x3,y3-vy,x4,y4-vy)
    canvas.update()
    time.sleep(0.1)

window = Tk()
canvas=Canvas(window, width=800, height=640, bg='white')
canvas.pack()
canvas.pack(padx=10, pady=10)
id1=canvas.create_rectangle(3, 7, 3+10, 7+10, fill='red')
id2=canvas.create_rectangle(3, 7, 3+10, 7+10, fill='blue')
x1,y1,x2,y2=canvas.coords(id1)
x3,y3,x4,y4=canvas.coords(id2)
canvas.coords(id1,x1,y1,x2,y2)
canvas.coords(id2,x3,y3,x4,y4)
canvas.update()

canvas.bind('<Left>', leftKey) 
canvas.bind('<Right>', rightKey)
canvas.bind('<Up>', upKey)
canvas.bind('<Down>', downKey)
canvas.focus_set()
vx = 5 
vy = 5
x_min = 0
y_min = 0
x_max = 800
y_max = 640

def stopLight:
    timer = random.randint(1,5)
    time.sleep(timer)
def OffL():
    objectrectangle=canvas.create_rectangle(380,620,400,640, fill="darkgreen")
    objectrectangle=canvas.create_rectangle(400,620,420,640, fill="darkred")
    canvas.update()
def StartL():
    objectrectangle=canvas.create_rectangle(400,620,420,640, fill="darkred")
    objectrectangle=canvas.create_rectangle(380,620,400,640, fill="green")
    canvas.update()
def StopL():
    objectrectangle=canvas.create_rectangle(380,620,400,640, fill="darkgreen")
    objectrectangle=canvas.create_rectangle(400,620,420,640, fill="red")
    canvas.update()

def Lighting():
    decision=random.randitn(1,2)
    if decision == 2:
        StopL()
        stopLight()
        StartL()
    window.after(5000, Lighting)
window.after(5000, Lighting)

class landmark:
    def __init__(self, xcoor, ycoor):
        self.treasure = random.randint(0,1)
        self.x = xcoor
        self.y = ycoor

    def drawlandmark():
    #add an action to select a sprite image for a landmark
    

TheMap = []       
TheMap.append(landmark(150,350))
TheMap.append(landmark(400,200))
TheMap.append(landmark(700,500))
TheMap.append(landmark(300,50))

def SearchX():
    while x3 < xcoor:
        xplus()
    while x4 > xcoor:
        xminus()

def SearchY():
    while y3 > ycoor:
        yplus()
    while y4 < ycoor:
        yminus()
    
for i in range(0, len(TheMap)):
    TheMap[i].drawlandmark

Points = 500
score = 0

def searcher(seeker):
    seeker = random.choice(TheMap)
    SearchX()
    SearchY()
    if seeker[0] == 1:
        score = score + Points
    MapMarks.remove(seeker)
    if len(MapMarks) == 0:
        return score
    else:
        seeker = random.choice(theMap)
        searcher(seeker)
